.\" Automatically generated by Pod::Man v1.3, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ModelUpdate 3"
.TH ModelUpdate 3 "2004-09-24" "perl v5.6.1" "User Contributed Perl Documentation"
.UC
.SH "NAME"
DBIx::ModelUpdate \- tool for check/update database schema
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use DBIx::ModelUpdate;
.Ve
.Vb 1
\&        ### Initialize
.Ve
.Vb 2
\&        my $dbh = DBI -> connect ($connection_string, $user, $password);        
\&        my $update = DBIx::ModelUpdate -> new ($dbh);
.Ve
.Vb 1
\&        ### Ensure that there exists the users table with the admin record
.Ve
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        id => {
\&                                                TYPE_NAME  => 'int',
\&                                                _EXTRA => 'auto_increment',
\&                                                _PK    => 1,
\&                                        },
.Ve
.Vb 6
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                                NULLABLE     => 0,
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                                data => [
.Ve
.Vb 1
\&                                        {id => 1, name => 'admin', password => 'bAckd00r'},
.Ve
.Vb 1
\&                                ],
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
.Vb 1
\&        ### Querying the structure
.Ve
.Vb 2
\&        my $schema        = $update -> get_tables;
\&        my $users_columns = $update -> get_columns ('users');
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 1
\&  This module let your application ensure the necessary database structure without much worrying about its current state.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When maintaining \f(CW\*(C`mod_perl\*(C'\fR Web applications, I often find myself in a little trouble. Suppose there exist:
 \- a production server with an old version of my application and lots of actual data in its database;
 \- a development server with a brand new version of Perl modules and a few outdated info in its database. 
.PP
Now I want to upgrade my application so that it will work properly with actual data. In most simple cases all I need is to issue some Ñ<\s-1CREATE\s0 \s-1TABLE/ALTER\s0 \s-1TABLE\s0> statements in \s-1SQL\s0 console. In some more complicated cases I write (by hand) a simple \s-1SQL\s0 script and then run it. Some tool like \f(CW\*(C`mysqldiff\*(C'\fR may help me.
.PP
Consider the situation when there are some different Web applications with independent databases sharing some common modules that use \s-1DBI\s0 and explicitly rely on the database(s) structure. All of these are installed on different servers. What shoud I do after introducing some new features in this common modules? The standard way is to dump the structure of each database, write and test a special \s-1SQL\s0 script, then run it on the appropriate \s-1DB\s0 server and then update the code. But I prefer to let my application do it for me.
.PP
When starting, my application must ensure that:
 \- there are such and such tables in my base (there can be much others, no matter);
 \- a given table contain such and such columns (it can be a bit larger thugh, it's ok);
 \- dictionnary tables are filled properly.
.PP
If eveything is \s-1OK\s0 the application starts immediately, otherwise it slightly alters the schema and then runs as usual.
.Sh "\s-1ONE\s0 \s-1TABLE\s0"
.IX Subsection "ONE TABLE"
For example, if I need a \f(CW\*(C`users\*(C'\fR table with standard \f(CW\*(C`id\*(C'\fR, \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`password\*(C'\fR columns in it, I write
.PP
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        id => {
\&                                                TYPE_NAME  => 'int',
\&                                                _EXTRA => 'auto_increment',
\&                                                _PK    => 1,
\&                                        },
.Ve
.Vb 5
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
.Sh "\s-1MANY\s0 \s-1TABLES\s0"
.IX Subsection "MANY TABLES"
Consider a bit more complex schema consisting of two related tables: \f(CW\*(C`users\*(C'\fR and \f(CW\*(C`sex\*(C'\fR:
.PP
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        id => {
\&                                                TYPE_NAME  => 'int',
\&                                                _EXTRA => 'auto_increment',
\&                                                _PK    => 1,
\&                                        },
.Ve
.Vb 5
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 3
\&                                        id_sex => {
\&                                                TYPE_NAME  => 'int',
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                        sex => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        id => {
\&                                                TYPE_NAME  => 'int',
\&                                                _EXTRA => 'auto_increment',
\&                                                _PK    => 1,
\&                                        },
.Ve
.Vb 4
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 1,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
.Sh "\s-1MANY\s0 \s-1TABLES\s0 \s-1WITH\s0 \s-1SIMLAR\s0 \s-1COLUMNS\s0"
.IX Subsection "MANY TABLES WITH SIMLAR COLUMNS"
It's very clear that each entity table in my schema has the same \f(CW\*(C`id\*(C'\fR field, so I will declare it only once:
.PP
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                default_columns => {
.Ve
.Vb 5
\&                        id => {
\&                                TYPE_NAME  => 'int',
\&                                _EXTRA => 'auto_increment',
\&                                _PK    => 1,
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 3
\&                                        id_sex => {
\&                                                TYPE_NAME  => 'int',
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                        sex => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 4
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 1,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
.Sh "\s-1INDEXING\s0"
.IX Subsection "INDEXING"
The next example shows how to index your tables:
.PP
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                default_columns => {
.Ve
.Vb 5
\&                        id => {
\&                                TYPE_NAME  => 'int',
\&                                _EXTRA => 'auto_increment',
\&                                _PK    => 1,
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 3
\&                                        id_sex => {
\&                                                TYPE_NAME  => 'int',
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                                keys => {
.Ve
.Vb 1
\&                                        fk_id_sex => 'id_sex'
.Ve
.Vb 1
\&                                }
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                        sex => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 4
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 1,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
.Sh "\s-1DICTIONNARY\s0 \s-1DATA\s0"
.IX Subsection "DICTIONNARY DATA"
Finally, I want ensure that each sex is enumerated and named properly:
.PP
.Vb 1
\&        $update -> assert (
.Ve
.Vb 1
\&                default_columns => {
.Ve
.Vb 5
\&                        id => {
\&                                TYPE_NAME  => 'int',
\&                                _EXTRA => 'auto_increment',
\&                                _PK    => 1,
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&                tables => {
.Ve
.Vb 1
\&                        users => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 5
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 50,
\&                                                COLUMN_DEF   => 'New user',
\&                                        },
.Ve
.Vb 4
\&                                        password => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 255,
\&                                        },
.Ve
.Vb 3
\&                                        id_sex => {
\&                                                TYPE_NAME  => 'int',
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                        sex => {
.Ve
.Vb 1
\&                                columns => {
.Ve
.Vb 4
\&                                        name => {
\&                                                TYPE_NAME    => 'varchar',
\&                                                COLUMN_SIZE  => 1,
\&                                        },
.Ve
.Vb 1
\&                                },
.Ve
.Vb 1
\&                                data => [
.Ve
.Vb 2
\&                                        {id => 1, name => 'M'},
\&                                        {id => 2, name => 'F'},
.Ve
.Vb 1
\&                                ]
.Ve
.Vb 1
\&                        },
.Ve
.Vb 1
\&                },
.Ve
.Vb 1
\&        );
.Ve
That's all. Now if I want to get back the structure of my database I write
.PP
.Vb 1
\&        my $schema        = $update -> get_tables;
.Ve
or 
.PP
.Vb 1
\&        my $users_columns = $update -> get_columns ('users');
.Ve
for single table structure.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
As of this version, only MySQL >= 3.23.xx is supported. It's quite easy to clone \f(CW\*(C`DBIx::ModelUpdate::mysql\*(C'\fR and adopt it for your favorite \s-1DBMS\s0. Volunteers are welcome.
.SH "SECURITY ISSUES"
.IX Header "SECURITY ISSUES"
It will be good idea to create \f(CW\*(C`DBIx::ModelUpdate\*(C'\fR with another \f(CW$dbh\fR than the rest of your application. \f(CW\*(C`DBIx::ModelUpdate\*(C'\fR requires administrative privileges while regular user souldn't.
.PP
And, of course, consider another admin password than \f(CW\*(C`bAckd00r\*(C'\fR :\-)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
mysqldiff
.SH "AUTHOR"
.IX Header "AUTHOR"
D. E. Ovsyanko, <do@zanas.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003 by D. E. Ovsyanko
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
